{"remainingRequest":"/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/node_modules/babel-loader/lib/index.js!/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/src/components/ExampleAddImage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/src/components/ExampleAddImage.vue","mtime":1645839296881},{"path":"/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/babel.config.js","mtime":1645618808539},{"path":"/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/node_modules/cache-loader/dist/cjs.js","mtime":1645620863593},{"path":"/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/node_modules/babel-loader/lib/index.js","mtime":1645620863823},{"path":"/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/node_modules/cache-loader/dist/cjs.js","mtime":1645620863593},{"path":"/Users/gimseon-u/Desktop/Projects/wysiwyg/wysiwyg-vue-spring-boot/vue-wysiwyg/node_modules/vue-loader/lib/index.js","mtime":1645620863880}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAA,yBADA;AAGAC;AACAC;AADA,GAHA;AAOAC,MAPA,kBAOA;AACA;AACAC,kBADA;AAEAC,mBAFA;AAGAC;AAHA;AAKA,GAbA;AAeAC;AACAC,gBADA,wBACAC,CADA,EACA;AACA;AACA;;AACA;AACA;AAAAC;AAAAC;AAAA;AACA;AACA,KAPA;AAQAC,aARA,uBAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA,KAbA;AAcAC,YAdA,sBAcA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,sBADA,GACA,iBADA;AAEAC,4BAFA,GAEAD;AAAA;AAAA,kBAFA;AAAA;AAAA,uBAGAE,yBAHA;;AAAA;AAGAC,qBAHA;AAAA,iDAIAA,KAJA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,KAnBA;AAoBAC,YApBA,sBAoBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAJ,sBADA,GACA,kBADA;AAEAK,4BAFA,GAEAL;AAAA;AAAA,kBAFA;AAGAC,4BAHA,GAGAI;AAAA;AAAA,kBAHA;AAIAC,yBAJA,GAIAN;AAAA;AAAA,kBAJA;AAAA;AAAA,uBAKAE,yBALA;;AAAA;AAKAC,qBALA;AAOAI,qBAPA,GAOA,EAPA;;AAQA;AACAC,sBADA,GACA;AAAAC;AAAA,oBADA;AAEAC,2BAFA,GAEAL,eAFA;AAGAE;AACA;;AACA;AAbA,kDAcAA,KAdA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA,KAnCA;AAoCAI,gBApCA,0BAoCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,iBADA;;AAAA;AACAJ,qBADA;AAEA;AAEA;AACAK;AAAA;AAAA;AALA,kDAMAL,KANA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,KA3CA;AA4CAM,sCA5CA,gDA4CA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,qBADA;;AAAA;AACAC,iCADA;AAEAC,4BAFA,GAEA,+BAFA;AAGAC,iBAHA,GAGA,CAHA;;AAAA;AAAA,sBAGAA,uBAHA;AAAA;AAAA;AAAA;;AAAA,sBAIAD,+BAJA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKAL,yBALA,GAKAK,yBALA;AAMAA;AACAE;;AAPA;AAGAD,mBAHA;AAAA;AAAA;;AAAA;AAUA;;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,KAvDA;AAwDAE,WAxDA,qBAwDA;AACA;AACA,KA1DA;AA2DAC,WA3DA,qBA2DA;AACA;AACA;AA7DA,GAfA;AA+EAC,SA/EA,qBA+EA;AACA;AACAC,mBACAC,QADA,EAEAC,SAFA,EAGAC,IAHA,EAIAC,KAJA,EAKAC,UALA,CADA;AAQAnC;AARA;AAYA,GA5FA;AA8FAoC,eA9FA,2BA8FA;AACA;AACA;AAhGA","names":["name","components","EditorContent","data","editor","content","imageFiles","methods","onFileChange","e","src","title","getImages","getBlobs","images","blobPromises","Promise","blobs","getFiles","imgLocalSrcs","fileNames","files","file","type","originSrc","uploadImages","Object","setEditorContentWithUploadedImages","uploadedImageSrcs","jsonContents","i","console","getJson","getHtml","mounted","extensions","Document","Paragraph","Text","Image","Dropcursor","beforeUnmount"],"sourceRoot":"src/components","sources":["ExampleAddImage.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-if=\"editor\">\n      <input type=\"file\" @change=\"onFileChange\">\n    </div>\n    <editor-content :editor=\"editor\"/>\n    <button @click=\"getJson\">JSON</button>\n    <button @click=\"getHtml\">HTML</button>\n    <button @click=\"getImages\">Images</button>\n    <button @click=\"getBlobs\">Get blob</button>\n    <button @click=\"getFiles\">Get File</button>\n    <button @click=\"setEditorContentWithUploadedImages\">Set Content With Uploaded Image url</button>\n    <pre>\n      {{ content }}\n    </pre>\n\n    <!-- Display the content retrieved from tip-tap editor -->\n    <!-- <span v-html=\"content\"></span>-->\n\n  </div>\n</template>\n\n<script>\nimport { Editor, EditorContent } from '@tiptap/vue-2'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport Image from '@tiptap/extension-image'\nimport Dropcursor from '@tiptap/extension-dropcursor'\n\nexport default {\n  name: 'ExampleAddImage',\n\n  components: {\n    EditorContent,\n  },\n\n  data() {\n    return {\n      editor: null,\n      content: null,\n      imageFiles: {}\n    }\n  },\n\n  methods: {\n    onFileChange(e) {\n      const file = e.target.files[0]\n      const url = URL.createObjectURL(file)\n      if (url) {\n        this.editor.chain().focus().setImage({src: url, title: file.name}).run()\n      }\n    },\n    getImages() {\n      const contentJson = this.editor.getJSON()\n      const images = contentJson.content.filter(c => c.type == 'image')\n      this.content = images\n      return this.content\n    },\n    async getBlobs() {\n      const images = this.getImages()\n      const blobPromises = images.map(image => fetch(image.attrs.src))\n      const blobs = await Promise.all(blobPromises)\n      return blobs\n    },\n    async getFiles() {\n      const images = this.getImages()\n      const imgLocalSrcs = images.map(image => image.attrs.src)\n      const blobPromises = imgLocalSrcs.map(src => fetch(src))\n      const fileNames = images.map(image => image.attrs.title)\n      const blobs = await Promise.all(blobPromises)\n\n      const files = {}\n      for (let i = 0; i < blobs.length; i++) {\n        const file = new File([blobs[i].blob()], fileNames[i], { type: 'images/jpeg'})\n        const originSrc = imgLocalSrcs[i]\n        files[originSrc] = file\n      }\n      this.imageFiles = files\n      return files\n    },\n    async uploadImages() {\n      const files = await this.getFiles()\n      // upload images logic\n\n      // temporary logic\n      Object.keys(files).forEach(originSrc => files[originSrc] = 'put your uploaded image src')\n      return files\n    },\n    async setEditorContentWithUploadedImages() {\n      const uploadedImageSrcs = await this.uploadImages()\n      const jsonContents = this.editor.getJSON().content\n      for (let i = 0; i < jsonContents.length; i++) {\n        if (jsonContents[i].type != 'image') continue\n        const originSrc = jsonContents[i].attrs.src\n        jsonContents[i].attrs.src = uploadedImageSrcs[originSrc]\n        console.log(uploadedImageSrcs[originSrc])\n      }\n\n      this.editor.commands.setContent(jsonContents)\n    },\n    getJson() {\n      this.content = this.editor.getJSON()\n    },\n    getHtml() {\n      this.content = this.editor.getHTML()\n    }\n  },\n\n  mounted() {\n    this.editor = new Editor({\n      extensions: [\n        Document,\n        Paragraph,\n        Text,\n        Image,\n        Dropcursor,\n      ],\n      content: `\n        <p>This is a basic example of implementing images. Drag to re-order.</p>\n      `,\n    })\n  },\n\n  beforeUnmount() {\n    this.editor.destroy()\n  },\n}\n</script>\n\n<style lang=\"scss\">\n/* Basic editor styles */\n.ProseMirror {\n  > * + * {\n    margin-top: 0.75em;\n  }\n\n  img {\n    max-width: 100%;\n    height: auto;\n\n    &.ProseMirror-selectednode {\n      outline: 3px solid #68CEF8;\n    }\n  }\n}\n</style>"]}]}